#!/bin/env python
# -*- coding:utf-8 -*-
import os,sys,time
import traceback
import MySQLdb as mdb
import datetime
import logging

logfilename = "checkaudit.for." + sys.argv[1]+ "AT" + time.strftime('%Y%m%d%H%M%S',time.localtime(time.time()))+".log"
logging.basicConfig(level=logging.WARNING,
        format='%(asctime)s %(levelname)s %(message)s',
        datefmt='%a, %d %b %Y %H:%M:%S',
                        filename=logfilename,
                                        filemode='w')

#################################################################################################
#定义一个StreamHandler，将INFO级别或更高的日志信息打印到标准错误，并将其添加到当前的日志处理对象#
console = logging.StreamHandler()
#console.setLevel(logging.DEBUG)
console.setLevel(logging.WARNING)
formatter = logging.Formatter('%(levelname)-8s %(message)s')
console.setFormatter(formatter)
logging.getLogger('').addHandler(console)
#################################################################################################
logging.debug('This is debug message')
logging.info('This is info message')
logging.warning('This is warning message')

last_day_list = [0,31,28,31,30,31,30,31,31,30,31,30,31]

class DBAccess:
    def __init__(self, name):
        self.conn = None
        self.citys = {} #地市国内
        self.citysIP = []  #地市IP
        self.nosect = None  #号段表
        self.step = 10000
        self.start = 2738*self.step
        self.whoami= name
        self.totalcheck = 0 #总查询数量
        self.failnums = 0 #对比失败数量
        self.bignums = 0 #多于一个的记录数量
        self.successnums = 0 #成功数量
        
    def __del__( self ):
        if self.conn is not None:
            self.conn.close()
            
    def commit( self ):
        try:
            self.conn.commit()
            return True
        except mdb.Error, e:
            print "Error %d: %s" % (e.args[0], e.args[1])
            return False
        
    def connect( self, host='localhost', user='mvno', passwd='123456', db='RECORD', port=3306 ):
        try:
            self.conn = mdb.connect(host, user, passwd, db, port)
            self.conn.cursor().execute("set names utf8")
        except mdb.Error, e:
            print "Error %d: %s" % (e.args[0], e.args[1])
            return False
        return  True
        
    def QueryBill( self, sql ):
        try:
            cursor = self.conn.cursor(mdb.cursors.DictCursor)
            cursor.execute(sql)
            rows = cursor.fetchall()
            cursor.close()
            return rows
        except mdb.Error, e:
            print "Error %d: %s" % (e.args[0], e.args[1])
            return None
            
    def InsertBill( self, sql ):
        try:
            cursor = self.conn.cursor()
            cursor.execute(sql)
            cursor.close()
            return True
        except mdb.Error, e:
            print "Error %d: %s" % (e.args[0], e.args[1])
            return False

    def GetStep(self):  
		return self.step

    def GetNextday(self, mytime):  
            myday = datetime.datetime( int(mytime[0:4]),int(mytime[4:6]),int(mytime[6:8]) )   
            delta = datetime.timedelta(days=+1)  
            nextday = myday + delta  
            next_time = nextday.strftime('%Y%m%d')  
            return next_time  
    def Dump(self):  
		logging.warning("whoami :%s" % (self.whoami))
		logging.warning("totalcheck:%d" % (self.totalcheck))
		logging.warning("failnums:%d" % (self.failnums))
		logging.warning("bignums:%d" % (self.bignums))
		logging.warning("successnums:%d" % (self.successnums))
    
    def QueryCallDisplayBill( self, year, month):
        first_day = "%04d-%02d-01" % (year, month)
        if month == 2:
            if (year % 400 == 0) or (year % 100 != 0 and year % 4 == 0):
                last_day = "%04d-%02d-29" % (year, month)
            else: 
                last_day = "%04d-%02d-28" % (year, month)
        else: 
            last_day = "%04d-%02d-%02d" % (year, month, last_day_list[month]) 
        sql = '''SELECT DISTINCT chargeNum as chargenum FROM record.bm_bi_fixedfee as fix 
                WHERE fix.dealTime <= '%s 23:59:59' 
                and fix.dealTime > '%s' and fix.productCode='PV.CND.0.1' ''' % (last_day, first_day);
        print sql
        return self.QueryBill(sql)
        
    def QueryAreaInfo( self ):
        try:
            area_map = {}
            sql = '''select PROVINCECODE,CITYCODE,NUMBERH3 from if.INT_VOP_FILENOSECT'''
            records = self.QueryBill(sql)
            #print records
            if records is None:
                print "查询号段表出错！"
                return False
            for row in records:
                area_map[row["NUMBERH3"]] = [row["PROVINCECODE"],row["CITYCODE"]]
            return area_map
        except:
            traceback.print_exc()   
            return None
            
    def MergeCallDisplay( self, rows, area_map ):
        try:
            result = {}
            for row in rows:
                num = row["chargenum"][0:8]
                provcode = area_map[num][0]
                citycode = area_map[num][1]
                if citycode not in result:
                    result[citycode] = {}
                sql = '''select a.regionName as city,b.regionName as prov from common.sa_db_region a left join common.sa_db_region b 
                        on a.parentID = b.regionID where a.regionID = %s''' % citycode
                rs = self.QueryBill(sql)
                if rs is None:
                    print "查询省市信息出错，省市代码%s，%s" % (provcode, citycode)
                    continue
                for r in rs:
                    prov = r["prov"]
                    city = r["city"]
                    if "count" not in result[citycode]:
                        result[citycode]["count"] = 0
                    result[citycode]["CITYCODE"] = citycode
                    result[citycode]["PROVINCECODE"] = provcode
                    result[citycode]["cityName"] = city
                    result[citycode]["provName"] = prov
                    result[citycode]["count"] = result[citycode]["count"] + 1
                    break
            records = []
            for k,v in result.items():
                v["fee"] = v["count"] * 5000
                records.append(v)
            return records
        except:
            traceback.print_exc()
            return None
     
    def Statistic10193( self, period):
        sql = '''select sum(totalFee) standardFee, sum(billDuration) totalUsage, 
                 IFNULL(provinceCode,0) provinceCode, 
                 IFNULL(cityCode,0) cityCode, payPeriod FROM BM_BI_CS 
                 WHERE accountItemType in (2013, 2014, 2015, 2016) and destNum like '10193%%' and payPeriod = %s 
                 and totalFee > 0 GROUP BY provinceCode, cityCode ;''' % (period)
        print sql
        return self.QueryBill(sql)

    # billdate = 201512 之类的,6位
    def GetRecords( self, cursor, billdate):
        logging.debug(billdate)
        startdate = billdate
        enddate = self.GetNextday(billdate)
        if (self.whoami == "RECORD"):
            sql = '''SELECT duration, startTime,chargeNum, callType,destNum FROM BM_BI_CS where billCycle = '%s00' and startTime > '%s' and startTime < '%s' and chargeType = 1  limit %d,%d''' % (billdate[0:6], startdate, enddate, cursor, self.step);
        else:
            sql = '''SELECT duration, startTime,chargeNum, callType,destNum FROM BM_BI_CS where payPeriod = '%s' and startTime > '%s' and startTime < '%s' and chargeType = 1  limit %d,%d''' % (billdate[0:6], startdate, enddate, cursor, self.step);

        logging.debug(sql)
        return self.QueryBill(sql)

    # 将source 的记录去查自己表的记录，即source为检查方，本对方是参考方
    def CheckRecords( self, isource, billdate):
        #self.Dump()
        logging.warning(".")
        if (len(isource) < 1):
            logging.waring("empty source")
            return -1
        elif (len(isource) < self.step ):
            logging.warning(len(isource))

        nextday = self.GetNextday(billdate)
        for row in isource:
            self.totalcheck += 1
            #logging.warning(row)
            #logging.warning("checking row....%d" %(self.successnums))
            chargeNum = row["chargeNum"]
            destNum = row["destNum"]
            callType = row["callType"]
            startTime = row["startTime"]
            duration = row["duration"]
            if (self.whoami == "RECORD"):
				#同一个账期内的，即未跨月底月初,不会有本账期的下个月跑.当然，如果计费延迟了两三天，这个会有问题. 这个时候，直接用else的即可。
                if ( nextday[0:6] == billdate[0:6]):
                    sql = '''SELECT id, duration, startTime,chargeNum FROM BM_BI_CS where chargeNum='%s' and destNum='%s' and callType = '%d' and duration = '%d' and startTime='%s' and  billCycle = '%s00' ''' % (chargeNum, destNum, callType, duration, startTime,  billdate[0:6])
                else:
                    sql = '''SELECT id, duration, startTime,chargeNum FROM BM_BI_CS where chargeNum='%s' and destNum='%s' and callType = '%d' and duration = '%d' and startTime='%s' ''' % (chargeNum, destNum, callType, duration, startTime)
            else: 
               # sql = '''SELECT id, duration, startTime,chargeNum FROM BM_BI_CS where chargeNum='%s' and destNum='%s' and callType = '%d' and duration = '%d' and startTime='%s' and  payPeriod = '%s' ''' % (chargeNum, destNum, callType, duration,startTime)
                sql = '''SELECT id, duration, startTime,chargeNum FROM BM_BI_CS where chargeNum='%s' and destNum='%s' and callType = '%d' and duration = '%d' and startTime='%s' ''' % (chargeNum, destNum, callType, duration,startTime)
            logging.debug(sql)
            records = self.QueryBill(sql)
            if (len(records) < 1):
                logging.error("can not find it in %s! " %(self.whoami))
                logging.error("[MISSED_RECORD_SQL]: %s" %(sql))
                self.failnums += 1
            elif (len(records) > 1): 
                self.bignums += 1
                logging.warning("multi records :%s"%(records))
            else:
                logging.debug(records)
                self.successnums += 1
                #logging.warning("1multi records :%s"%(records))
        return 1


    def StatisticRecords( self, period):
        cursor = self.start 
        billDua = 0
        origDua = 0
        self.nosect = self.QueryAreaInfo() 
        recs = self.GetRecords(cursor)
        stop = 0
        #monthmax = datetime.strptime('2015-12-01 00:00:01', "%Y-%m-%d %H:%M:%S")
        #monthmin = time.strptime('2015-11-01 00:00:01', "%Y-%m-%d %H:%M:%S")
        monthmin = "2015-11-01 00:00:00"
        monthmax = "2015-12-01 00:00:00"
        #print monthmin, datetime.datetime(* monthmin[:6])
        while (len(recs) > 0 ): #and stop < 2): 
            #print len(recs)
            for row in recs:
                 #print row
                 #print row["startTime"].strftime("%Y-%m-%d %H:%M:%S")
                 lessMin = row["startTime"].strftime("%Y-%m-%d %H:%M:%S") < monthmin
                 bigerMax= row["startTime"].strftime("%Y-%m-%d %H:%M:%S") > monthmax
                 if lessMin or bigerMax:
                     #print "not this period"
                      continue;
                 #print row['duration']
                 origDua += row['duration']
                 value = 0
                 if row['duration'] % 60 != 0:
                     value = (row['duration'] / 60 + 1) * 60
                     billDua += value
                 else:
                     value = row['duration']
                 #print value
                 #get city statics
                 num = row["chargeNum"][0:8]
                 cityCode = self.nosect[num][1]
                 #citycode = area_map[num][1]
                 if cityCode not in self.citys:
                     self.citys[cityCode] = value
                 else:
                     self.citys[cityCode] += value
                 #print cityCode, self.citys[cityCode]
            #next para
            cursor += self.step
            recs = self.GetRecords(cursor)
            stop += 1
            if stop % 23 == 0:
                 logging.info(self.citys)
                 logging.info('''stop:%d, billDuration: %d, orignal:%d''' % (stop, billDua, origDua))
            if stop > 433333:
                 logging.info("stop num : %d lager than 433333!! " % stop);
                 sleep(60) 

        logging.info('''end ----stop:%d, billDuration: %d, orignal:%d''' % (stop, billDua, origDua))
        logging.info(self.citys)

    
    def InsertIntoTotalFee(self, rows, serviceType, serviceCatalog, subServiceType):
       try:
         for row in rows:
            sql = '''INSERT INTO bm_bi_sumfee_favorable(SUMDATE, PROV_CODE, CITY_CODE, 
                 SERVICE_CATALOG, SERVICE_TYPE, SUB_SERVICE_TYPE, TOTAL_USAGE, STANDARD_FEE, DEALTIME ) 
                 VALUES (%s, %s, %s, %s, %s, %s, %s, %s, now())  '''
            sql = sql % (row["payPeriod"], row["provinceCode"], row["cityCode"], serviceCatalog, serviceType, 
                 subServiceType, row["totalUsage"], row["standardFee"])
            print sql
            self.InsertBill(sql);
         self.commit() 
       except:
            traceback.print_exc()
            return False

types = ["RECORD", "SETTLE"""]    
       
if __name__ == "__main__":
    try:
        billDate = sys.argv[1]
        if len(billDate) != 8:
            print "账期%s格式不对！" % billDate
            #sys.exit(-1)
        year = int(billDate[0:4])
        month = int(billDate[4:6])
        day = int(billDate[6:])

        if len(sys.argv) > 3:
            if sys.argv[2] not in types or  sys.argv[3] not in types:
                logging.warning("类型不对，应该为SETTLE 和 RECORD")

        
        logging.warning("%s"%(sys.argv))
        db_record = DBAccess("RECORD")
        db_record.connect()
        db_settle = DBAccess("SETTLE")
        #db_settle.connect()
        db_settle.connect()

        #main process
        cusor = 0
        rows = db_settle.GetRecords(cusor, billDate)
        logging.debug(rows)
        while(len(rows) > 0):
            ret = db_record.CheckRecords(rows, billDate)
            if ret < 1:
                logging.warning("no more data!!!")
                break;

            cusor += db_settle.GetStep()
            #logging.warning("now is %dth check"%(cusor))
            rows = db_settle.GetRecords(cusor, billDate)

            #print (cusor/db_settle.GetStep()) % 10)
            if ((cusor/db_settle.GetStep()) % 10) == 0:
                logging.warning("now do times :%d......" % (cusor))
                db_record.Dump()
                #break; 
        logging.error("end........!!.")
        db_record.Dump()
    except:
        traceback.print_exc()
